/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/container.glb -o src/components/Container.jsx 
*/

import React, { useRef, useEffect, useMemo } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import * as THREE from 'three'

// Update the model path to use the correct base URL
const MODEL_PATH = '/3d_viewer/models/container.glb'

export function Container({ 
  scale = 1,
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  bodyColor = '#ffffff',
  labelVisible = true,
  logoVisible = true,
  customLogoUrl = null,
  customLabelUrl = null,
  ...props 
}) {
  const group = useRef()
  const { nodes, materials } = useGLTF(MODEL_PATH)
  const logoRef = useRef()
  const labelRef = useRef()

  // Create a new material for the body with the specified color
  const bodyMaterial = useMemo(() => new THREE.MeshStandardMaterial({
    color: bodyColor,
    metalness: 0.1,
    roughness: 0.5,
    side: THREE.DoubleSide,
  }), [bodyColor])

  // Create base logo material
  const baseLogoMaterial = useMemo(() => new THREE.MeshBasicMaterial({
    transparent: true,
    side: THREE.DoubleSide,
    depthWrite: false,
    opacity: 1.0,
  }), [])

  // Create base label material
  const baseLabelMaterial = useMemo(() => new THREE.MeshBasicMaterial({
    transparent: true,
    side: THREE.DoubleSide,
    depthWrite: false,
    opacity: 1.0,
  }), [])

  // Handle custom logo texture
  useEffect(() => {
    if (customLogoUrl && logoRef.current) {
      const textureLoader = new THREE.TextureLoader()
      textureLoader.load(customLogoUrl, (texture) => {
        // Update texture settings with new color space API
        texture.colorSpace = THREE.SRGBColorSpace
        texture.flipY = false
        texture.needsUpdate = true

        // Create a new material for the logo
        const logoMaterial = new THREE.MeshBasicMaterial({
          map: texture,
          transparent: true,
          side: THREE.DoubleSide,
          depthWrite: false,
          opacity: 1.0,
        })

        // Apply the material to the logo mesh
        if (logoRef.current) {
          logoRef.current.material = logoMaterial
        }
      })
    } else if (logoRef.current) {
      // Reset to default material if no custom logo
      logoRef.current.material = nodes.logo_img.material.clone()
    }
  }, [customLogoUrl, nodes.logo_img.material])

  // Handle custom label texture
  useEffect(() => {
    if (customLabelUrl && labelRef.current) {
      const textureLoader = new THREE.TextureLoader()
      textureLoader.load(customLabelUrl, (texture) => {
        // Update texture settings with new color space API
        texture.colorSpace = THREE.SRGBColorSpace
        texture.flipY = false
        texture.needsUpdate = true

        // Create a new material for the label
        const labelMaterial = new THREE.MeshBasicMaterial({
          map: texture,
          transparent: true,
          side: THREE.DoubleSide,
          depthWrite: false,
          opacity: 1.0,
        })

        // Apply the material to the label mesh
        if (labelRef.current) {
          labelRef.current.material = labelMaterial
        }
      })
    } else if (labelRef.current) {
      // Reset to default material if no custom label
      const defaultLabelMaterial = materials['img_HOT868651_Tiefenschutz_AG_10Liter_20104-10--www_500-removeb'].clone()
      defaultLabelMaterial.side = THREE.DoubleSide
      defaultLabelMaterial.transparent = true
      defaultLabelMaterial.depthWrite = false
      defaultLabelMaterial.needsUpdate = true
      labelRef.current.material = defaultLabelMaterial
    }
  }, [customLabelUrl, materials])

  // Clone and modify the label material
  const labelMaterial = useMemo(() => {
    const material = materials['img_HOT868651_Tiefenschutz_AG_10Liter_20104-10--www_500-removeb'].clone()
    material.side = THREE.DoubleSide
    material.transparent = true
    material.depthWrite = false
    material.needsUpdate = true
    return material
  }, [materials])

  return (
    <group 
      ref={group} 
      {...props} 
      dispose={null}
      scale={scale}
      position={position}
      rotation={rotation}
    >
      {/* Container body */}
      <mesh 
        geometry={nodes.Cube.geometry} 
        material={bodyMaterial} 
        position={[-0.204, 1.453, 1.666]} 
        scale={[1, 1, 0.628]}
        castShadow
        receiveShadow
      />
      
      {/* Container label */}
      {labelVisible && (
        <mesh 
          ref={labelRef}
          geometry={nodes['img_HOT868651_Tiefenschutz_AG_10Liter_20104-10--www_500-removeb'].geometry} 
          material={customLabelUrl ? baseLabelMaterial : labelMaterial}
          position={[-0.048, 1.414, 2.161]} 
          rotation={[Math.PI / 2, 0, 0]} 
          scale={1.812}
        />
      )}
      
      {/* Logo */}
      {logoVisible && (
        <mesh 
          ref={logoRef}
          geometry={nodes.logo_img.geometry} 
          material={customLogoUrl ? baseLogoMaterial : nodes.logo_img.material}
          position={[-0.32, 1.12, 2.363]} 
          rotation={[Math.PI / 2, 0, 0]} 
          scale={0.3}
          renderOrder={1}
        />
      )}
    </group>
  )
}

// Update the preload path as well
useGLTF.preload(MODEL_PATH)
